/*
 * -------------------------------------------------
 *  MaestSi/CharONT2 Nextflow config file
 * -------------------------------------------------
 */
 
params {
    // Path to fastq files, use wildcards to select multiple samples
    fastq_files = "/path/to/samples*fastq"
 
    // Path to a folder where to store results
    results_dir = "/path/to/results_dir"

    //PCRThr is the identity threshold for in-silico PCR
    PCRThr = 0.8

    //primerSeqOne and primerSeqTwo are sequences of primers used for in-silico PCR
    primerSeqOne = "sequence of interest"
    primerSeqTwo = "sequence of interest"

    //scripts_dir is the directory containing all scripts
    scripts_dir = "/path/to/scripts_dir"

    //target_reads_consensus defines the maximum number of reads used for consensus calling
    target_reads_consensus = 200

    //target_reads_polishing defines the maximum number of reads used for consensus polishing
    target_reads_polishing = 200

    //max_reads_preliminary defines the maximum number of reads used for preliminary clustering and consensus calling
    max_reads_preliminary = 100

    //identity threshold for clustering preliminary allele assembly
    clustering_id_threshold=0.85

    //MAFFT plurality value: minimum fraction of aligned reads supporting a basis for including it in the preliminary consensus
    plurality=0.15

    //minimum minor allele frequency; if less than min_maf*100% of reads are assigned to Allele //2, the sample is assumed homozygous
    min_maf=0.2
    
    //num_alleles represents the number of expected alleles
    num_alleles=2

    //label as candidate outliers reads with score > 3rd_QR + IQR_outliers_coef_precl*IQR or score < 1st_QR - IQR_outliers_coef_precl*IQR
    IQR_outliers_coef_precl=3

    //label as outliers reads with score > 3rd_QR + IQR_outliers_coef*IQR or score < 1st_QR - IQR_outliers_coef*IQR; IQR is computed within each cluster
    IQR_outliers_coef=3

    //set fast_alignment_flag=1 if you want to perform fast multiple sequence alignment; otherwise set fast_alignment_flag=0
    fast_alignment_flag=1

    //minimum number of soft-clipped bases to be considered as a DEL or INS
    min_clipped_len=50

    //sd_noise_score is the standard deviation of gaussian-distributed noise with zero mean added to score
    sd_noise_score=0.2

    //primers_length defines how many bases are trimmed from consensus sequences
    primers_length=0
    
    //medaka model
    medaka_model="r941_min_sup_g507"

    help = false

    // Flags to select which process to run
    inSilicoPCR = true
    preliminaryConsensusCalling = true
    readsAssignment = true
    draftConsensusCalling = true
    consensusPolishing = true
    trfAnnotate = true
}

profiles {
	singularity {
	    singularity.enabled = true
	    singularity.autoMounts = false
	    //singularity.cacheDir = "/path/to/singularity/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'pbspro' // set to 'local' if you are not using a queue management system
	    queue = 'workq'
	    perJobMemLimit = true
	    queueStatInterval = '1 ms'
	    pollInterval = '1 ms'
	    container = 'maestsi/charont:latest'
	    containerOptions = '--bind /home:/home' // adjust according to which directory you wish to make accessible to singularity

	    withName:inSilicoPCR {
	    	cpus = { params.inSilicoPCR ? 1 : 1 }
	    	memory = { params.inSilicoPCR ? 10.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:preliminaryConsensusCalling {
	    	cpus = { params.preliminaryConsensusCalling ? 1 : 1 }
	    	memory = { params.preliminaryConsensusCalling ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:readsAssignment {
	    	cpus = { params.readsAssignment ? 4 : 1 }
	    	memory = { params.readsAssignment ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:draftConsensusCalling {
	    	cpus = { params.draftConsensusCalling ? 4 : 1 }
	    	memory = { params.draftConsensusCalling ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:consensusPolishing {
	    	cpus = { params.consensusPolishing ? 4 : 1 }
	    	memory = { params.consensusPolishing ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:trfAnnotate {
	    	cpus = { params.trfAnnotate ? 4 : 1 }
	    	memory = { params.trfAnnotate ? 20.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    }
    }
    docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'local'
        container = 'maestsi/charont:latest'
	    containerOptions = '-v /Users/:/Users' // adjust according to which directory you wish to make accessible to docker

	    withName:inSilicoPCR {
	    	cpus = { params.inSilicoPCR ? 1 : 1 }
	    	memory = { params.inSilicoPCR ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:preliminaryConsensusCalling {
	    	cpus = { params.preliminaryConsensusCalling ? 4 : 1 }
	    	memory = { params.preliminaryConsensusCalling ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:readsAssignment {
	    	cpus = { params.readsAssignment ? 4 : 1 }
	    	memory = { params.readsAssignment ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:draftConsensusCalling {
	    	cpus = { params.draftConsensusCalling ? 4 : 1 }
	    	memory = { params.draftConsensusCalling ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:consensusPolishing {
	    	cpus = { params.consensusPolishing ? 4 : 1 }
	    	memory = { params.consensusPolishing ? 15.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:trfAnnotate {
	    	cpus = { params.trfAnnotate ? 1 : 1 }
	    	memory = { params.trfAnnotate ? 15.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
        }
    }    
}

tower {
	enabled = false
	endpoint = '-'
	accessToken = 'insert access token'
}
